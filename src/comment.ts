/**
 * PR Comment Poster
 */

import * as github from '@actions/github';
import type { ScanResults } from './scanner';

export async function postComment(token: string, results: ScanResults): Promise<void> {
  const octokit = github.getOctokit(token);
  const { context } = github;

  if (!context.payload.pull_request) {
    return;
  }

  const body = generateCommentBody(results);

  // Post or update comment
  const { data: comments } = await octokit.rest.issues.listComments({
    owner: context.repo.owner,
    repo: context.repo.repo,
    issue_number: context.payload.pull_request.number,
  });

  const botComment = comments.find(
    (comment) => comment.user?.type === 'Bot' && comment.body?.includes('Baseline Compatibility Report')
  );

  if (botComment) {
    await octokit.rest.issues.updateComment({
      owner: context.repo.owner,
      repo: context.repo.repo,
      comment_id: botComment.id,
      body,
    });
  } else {
    await octokit.rest.issues.createComment({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: context.payload.pull_request.number,
      body,
    });
  }
}

function generateCommentBody(results: ScanResults): string {
  const lines: string[] = [];

  lines.push('## 📊 Baseline Compatibility Report\n');

  if (results.totalViolations === 0) {
    lines.push('✅ **No compatibility issues found!**\n');
    lines.push(`Scanned ${results.totalFiles} files.\n`);
    return lines.join('\n');
  }

  // Summary table
  lines.push('| Metric | Value |');
  lines.push('|--------|-------|');
  lines.push(`| Files Scanned | ${results.totalFiles} |`);
  lines.push(`| Files with Issues | ${results.filesWithIssues} |`);
  lines.push(`| Total Violations | ${results.totalViolations} |`);
  lines.push(`| Errors | ${results.errorCount} ❌ |`);
  lines.push(`| Warnings | ${results.warningCount} ⚠️ |`);
  lines.push('');

  // Top issues
  if (results.fileResults.length > 0) {
    lines.push('### Issues by File\n');

    const topFiles = results.fileResults.slice(0, 5);
    for (const file of topFiles) {
      lines.push(`**${file.file}**`);
      lines.push(`- ${file.violations.length} issue(s)`);
      lines.push(`- Compatibility Score: ${file.metrics.compatibilityScore}%`);
      lines.push('');
    }

    if (results.fileResults.length > 5) {
      lines.push(`...and ${results.fileResults.length - 5} more file(s)\n`);
    }
  }

  lines.push('---');
  lines.push('_Generated by [Baseline Suite](https://github.com/omkardongre/Baseline-Developer-Suite)_');

  return lines.join('\n');
}
